class SemanticCube:
  def __init__(self):
    self.semantic_cube = {
      'int': {
        'int': {
          '+': 'int',
          '-': 'int',
          '*': 'int',
          '/': 'float',
          '>': 'bool',
          '<': 'bool',
          '>=': 'bool',
          '<=': 'bool',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'int',
        },
        'float': {
          '+': 'float',
          '-': 'float',
          '*': 'float',
          '/': 'float',
          '>': 'bool',
          '<': 'bool',
          '>=': 'bool',
          '<=': 'bool',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
        'char': {
          '+': 'error',
          '-': 'error',
          '*': 'error',
          '/': 'error',
          '>': 'error',
          '<': 'error',
          '>=': 'error',
          '<=': 'error',
          '!=': 'bool', # o error?
          '==': 'bool', # o error?
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
        'bool': {
          '+': 'error',
          '-': 'error',
          '*': 'error',
          '/': 'error',
          '>': 'error',
          '<': 'error',
          '>=': 'error',
          '<=': 'error',
          '!=': 'bool', # o error?
          '==': 'bool', # o error?
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
      },
      'float': {
        'int': {
          '+': 'float',
          '-': 'float',
          '*': 'float',
          '/': 'float',
          '>': 'bool',
          '<': 'bool',
          '>=': 'bool',
          '<=': 'bool',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
        'float': {
          '+': 'float',
          '-': 'float',
          '*': 'float',
          '/': 'float',
          '>': 'bool',
          '<': 'bool',
          '>=': 'bool',
          '<=': 'bool',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'float',
        },
        'char': {
          '+': 'error',
          '-': 'error',
          '*': 'error',
          '/': 'error',
          '>': 'error',
          '<': 'error',
          '>=': 'error',
          '<=': 'error',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
        'bool': {
          '+': 'error',
          '-': 'error',
          '*': 'error',
          '/': 'error',
          '>': 'error',
          '<': 'error',
          '>=': 'error',
          '<=': 'error',
          '!=': 'bool',
          '==': 'bool',
          'y': 'error',
          'o': 'error',
          '=': 'error',
        },
      },
      'char': {
          'int': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          },
          'float': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          },
          'char': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'char',
          }, 
          'bool': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          },
      },
      'bool': { 
        'int': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          },
          'float': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          },
          'char': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'error',
            'o': 'error',
            '=': 'error',
          }, 
          'bool': {
            '+': 'error',
            '-': 'error',
            '*': 'error',
            '/': 'error',
            '>': 'error',
            '<': 'error',
            '>=': 'error',
            '<=': 'error',
            '!=': 'bool',
            '==': 'bool',
            'y': 'bool', # duda con Elda -> si no tendremos variables booleanas (ifs)
            'o': 'bool',
            '=': 'bool',
          },
      },
    }

  def get_type(self, leftType, rightType, op):
    """ Returns the data type expected from performing the operation """
    return self.semantic_cube[leftType][rightType][op]